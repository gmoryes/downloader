#!/usr/bin/perl

use strict;
use warnings;

use AnyEvent::HTTP;
use Getopt::Long;
use Term::ANSIColor;

sub create_dir_if_exists {
    my $dir = shift;
    my $i = 1;
    while (1) {
        if (!(-e $dir.$i)) {
            system("mkdir ".$dir.$i);
            return $dir.$i;
        }
        $i++;
    }
}

my $CONFIG = {}; 
GetOptions($CONFIG, qw/ 
    url=s
    max-active-downloads=i
    tmp-dir=s
    retries-count=i
    nsuffix=i
    suffix=s
    start-from=i
    name=s
    push-android
    push-android-path=s
    help
/);

if (exists $CONFIG->{help} || not exists $CONFIG->{url}) {
    print "Execute: download_video\n";
    print "\t--url                   - URL for concat 'segment[n].ts' and get full video\n";
    print "\t--name                  - Name of output file (default: \"video\")\n";
    print "\t--max-active-downloads  - Maximum active segments downloads, default: 5\n";
    print "\t--tmp-dir               - Temporary directory for save files, default: /tmp\n";
    print "\t--retries-count         - Number of attempts to download one segment (-1 means infinitive), default: 5\n";
    print "\t--nsuffix <N>        - Format of url (default: 1)\n";
    print "\t  --nsuffix 1   - for \"segment<n>.ts\"\n";
    print "\t  --nsuffix 2   - for \"Frag<n>Num<n>.ts\"\n";
    print "\t--suffix <string> - For any suffix, for example for url: .../segment1.ts, just say \"--suffix segment{d}.ts\"\n";
    print "\t                  - where, {d} - place where where programm will put numbers of .ts files.\n";
    print "\t--push-android-path <s> - Set path for files in android device (default: /sdcard/Movies).\n";
    print "\t--push-android          - Make `adb push` to connected android devices (debug mode on is needed).\n";
    print "\t--start-from            - Number of segment, from which download should continue (default: 1)\n";
    print "\t--help                  - Show this message\n";
    exit;
}

if (not exists $CONFIG->{'push-android-path'} and exists $CONFIG->{'push-android'}) {
  $CONFIG->{'push-android-path'} = '/sdcard/Movies';
}

$CONFIG->{'tmp-dir'} ||= "/tmp";
$CONFIG->{'tmp-dir'} = create_dir_if_exists($CONFIG->{'tmp-dir'}.'/tmp');
$CONFIG->{'max-active-downloads'} ||= 5;
$CONFIG->{'retries-count'} ||= 5;
$CONFIG->{'nsuffix'} ||= 1;
$CONFIG->{'name'} ||= "video";
$CONFIG->{'start-from'} ||= 1;
$CONFIG->{'suffix'} ||= "";

my $url = $CONFIG->{url};
my $stop = 0;
my $dir = create_dir_if_exists($CONFIG->{'tmp-dir'}."/ts");
my $max_active_downloads = $CONFIG->{'max-active-downloads'};

my $proccessed_parts = 1;
my $current_part = $CONFIG->{'start-from'};
my $last_part = 0;

$| = 1;

my $cv = AnyEvent->condvar;
my $time_start = 0;

sub print_color {
  my ($param, @text) = @_;
  print color($param);
  print @text;
  print color('reset');
}

my $int_counter = 0;
$SIG{INT} = sub {
  $int_counter++;
  if ($int_counter == 4) {
    print_color("bold green", "Try to interrupt 3 times, do exit.\n");
    exit;
  }
  print_color("bold red", "\nInterrupt app, stop downloading, start concatinate framents.\n");
  $cv->send;
};

sub get_url_by_nsuffix {
  my $number = shift;
  my $suffix_format = $CONFIG->{'nsuffix'};
  if ($suffix_format eq "1") {
    return "$url/segment$number.ts";
  } elsif ($suffix_format eq "2") {
    return "$url"."Frag$number"."Num$number.ts";
  } else {
    print "Bad nsuffix: $suffix_format\n";
    exit;
  }
}

sub get_url_request {
  my $number = shift;
  
  if (not $CONFIG->{'suffix'}) {
    return get_url_by_nsuffix($number);
  } else {
    my $suffix = $CONFIG->{'suffix'};
    $suffix =~ s/\{d\}/$number/g;
    return "$url/$suffix";
  }
}

sub download {
    my $number = shift;
    my $attempt = shift;

    if (!$attempt) {
        print color("bold red");
        print "Error: segment$number.ts, can not download this segment :(\n";
        print color('reset');

        if ($current_part + 1 <= $last_part) {
            $current_part++;
            download($current_part, $CONFIG->{'retries-count'});
        }
        return;
    }
    
    my $url_request = get_url_request($number);
    $cv->begin;
    http_get(
        $url_request,
        timeout => 5,
        sub {
            my ($data, $headers) = @_;
            my $response_code = $headers->{Status};
            my $speed = $proccessed_parts / (time - $time_start + 1);
            my $await_time = ($last_part - $current_part) / $speed; # in seconds
            $await_time = sprintf("%.1f", $await_time / 60); # in minutes
            print "Process: $current_part / $last_part, await time ~ $await_time minutes                                                \r"; 
            if ($response_code =~ /^2/) { 
                $proccessed_parts++;
                open (my $fh, ">", "$dir/$number.ts") or die $!;
                syswrite($fh, $data);
                close($fh);
                if ($current_part + 1 <= $last_part) {
                    $current_part++;
                    download($current_part, $CONFIG->{'retries-count'});
                }
            } else {
                print color("bold yellow");
                print "Bad attempt: segment$number.ts, try again";
                print "($attempt / ".$CONFIG->{'retries-count'}.")                                                                     \n" if ($attempt != -1);
                print "                                                                                                                \n" if $attempt == -1;
                print color('reset');
                download($number, ($attempt == -1) ? -1 : $attempt - 1);
            }

            $cv->end;
        }
    );
}

sub is_zero_size {
    my $number = shift;

    my $result = 0;
    my $condvar = AnyEvent->condvar;
    $condvar->begin;

    my $url_request = get_url_request($number);
    http_head(
        $url_request,
        sub {
            my ($data, $headers) = @_;

            if ($headers->{Status} == 404) {
                $result = 1;
            }

            $condvar->end;
        }
    );

    $condvar->recv;

    return $result
}

sub get_last_segment_number {
    my $current_segment = 1;

    while (not is_zero_size($current_segment)) {
        print "Try get: $current_segment segments\r";
        $current_segment += 100;
    }

    $current_segment -= 100;

    while (not is_zero_size($current_segment)) {
        print "Try get: $current_segment segments\r";
        $current_segment += 10;
    }

    $current_segment -= 10;

    while (not is_zero_size($current_segment)) {
        print "Try get: $current_segment segments\r";
        $current_segment++;
    }

    return $current_segment - 1;
}

print color("bold blue");
print "Try to find last segment...\n";
print color('reset');

$last_part = get_last_segment_number();
print "\n";

print color("bold blue");
print "Start download\n";
print color('reset');

$cv->begin;

$time_start = time;
for my $i (1 .. $max_active_downloads) {
    download($i, $CONFIG->{'retries-count'});
}

$cv->end;
$cv->recv;

print color("bold green");
print "\nEnd download (". (time - $time_start) . "s)\n";
print color('reset');

print color("bold blue");
print "Start concatinate\n";
print color('reset');

my $tmp = $CONFIG->{'tmp-dir'};
my $list_path = "$tmp/list_download_video";

system("rm -rf $list_path");
open(my $fh, ">", $list_path) or die $!;

for my $i (1 .. $last_part)
{
  if (-e "$dir/$i.ts")
  {
    print $fh "file '"."$dir/$i.ts"."'\n";
  }
}
close($fh);

system("rm -rf $tmp/video.ts");
system("ffmpeg -f concat -safe 0 -i $list_path -c copy $tmp/video.ts");
system("rm -rf $tmp/video.mp4");

my $output_name = $CONFIG->{'name'};
system("ffmpeg -i $tmp/video.ts -bsf:a aac_adtstoasc -c copy $tmp/$output_name.mp4");


if ($CONFIG->{'push-android'})
{
  print color("bold green");
  print "Start pushing to android device\n";
  print color('reset');

  my $path = $CONFIG->{'push-android-path'};
  system("adb push $tmp/$output_name.mp4 $path/$output_name.mp4");
}
else
{
  system("open ".$CONFIG->{'tmp-dir'});
}

print color("bold green");
if ($CONFIG->{'push-android'}) {
  print "Success, pushed to: ".$CONFIG->{'push-android-path'}."\n";
} else {
  print "Success, result placed to: $tmp/$output_name.mp4\n";
}
print color('reset');
